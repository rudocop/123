#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <stdlib.h>
#include "time.h"     // Время выполнения программы 
#include <unistd.h>    // Хеш-функция 
#define CITY_NUM 48   // Количество городов
#define POPSIZE 300    // Численность населения в популяции 
#define MAXVALUE 0x7ffffffff   // Максимальный предел пути
#define N 100000       // Нужно исправить в соответствии с фактическим значением пути
#define MAX_GEN 50000   // Максимальная эволюционная алгебра 
#define CROSS 0.5     // Оператор кроссовера
#define MUT 0.05      // Оператор мутации
using namespace std;

unsigned seed=(unsigned)time(0);    // Генерируем разные случайные последовательности каждый раз 
double Hash[CITY_NUM+1];

typedef struct CityPosition{
    double x;
    double y;
}CityPosition;                         // Городская локация 

CityPosition CityPos[38]={};

double CityDistance[CITY_NUM][CITY_NUM];   // Городское расстояние

typedef struct{
    int colony[POPSIZE][CITY_NUM+1];   // Население города, по умолчанию номер города отправления равен 0, тогда последний город с номером города также должен быть 0
    double fitness[POPSIZE];           // пригодность каждого человека, а именно 1 / расстояние [POPSIZE]
    double Distance[POPSIZE];          // Общий путь каждого человека
    int BestRooting[CITY_NUM+1];       // Оптимальная последовательность пути города
    double BestFitness;                // Оптимальное значение пригодности пути
    double BestValue;                  // Оптимальная длина пути
    int BestNum;                       // Количество городов с оптимальным маршрутом 
}TSP,*PTSP;

// Рассчитаем расстояние до города CityDistance [i] [j]
double CalculatDist(CityPosition CityPos[]){
    for(int i=0;i<CITY_NUM;i++){
        for(int j=0;j<CITY_NUM;j++){       // Последний город также должен вернуться к узлу отправления
            if(i!=j) CityDistance[i][j]=sqrt(pow(CityPos[j].x-CityPos[i].x,2)+pow(CityPos[j].y-CityPos[i].y,2));
            else CityDistance[i][i]=0;
        }
    }
}

// Массив
void copy(int a[],int b[]){
    for(int i=0;i<CITY_NUM+1;i++)
    {
        a[i]=b[i];
    }
}


// Используется для проверки того, находится ли вновь созданный узел в текущей группе, узел 0 является начальным узлом по умолчанию и конечным узлом
bool check(TSP &city,int pop,int num,int k){
    for(int i=0;i<=num;i++){
        if(k==city.colony[pop][i])
            return true;    // Вновь созданный узел существует в уже созданном пути
    }
    return false;    // Вновь созданный узел не существует в сгенерированном пути
}

// Инициализируем население, то есть присваиваем значение city.colony [i] [j]
void InitColony(TSP &city){
    int r;
    for(int i=0;i<POPSIZE;i++){
        city.colony[i][0]=0;
        city.colony[i][CITY_NUM]=0;
        city.BestValue=MAXVALUE;
        city.BestFitness=0;     // Чем больше значение пригодности, тем лучше
    }
    for(int i=0;i<POPSIZE;i++)
    {
        for(int j=1;j<CITY_NUM;j++)
        {
            r=rand()%(CITY_NUM-1)+1;      // Генерируем случайное число от 1 до CITY_NUM-1
            while(check(city,i,j,r))      // Произвольно генерируем номер города, который присваивается city.colony [i] [j]
            {
                r=rand()%(CITY_NUM-1)+1;
            }

            city.colony[i][j]=r;
        }
    }
}

// Рассчитать фитнес и выбрать лучший 
void CalFitness(TSP &city){
    int start,end;
    int Best=0;
    for(int i=0;i<POPSIZE;i++){        // Найти общий путь и пригодность каждого человека 
        city.Distance[i]=0;
        for(int j=1;j<=CITY_NUM;j++){
            start=city.colony[i][j-1];
			end=city.colony[i][j];
            city.Distance[i]=city.Distance[i]+CityDistance[start][end];   //city.Distance[i] Общий путь каждого человека
        }
        city.fitness[i]=N/city.Distance[i];
        if(city.fitness[i]>city.fitness[Best])  // Выбираем максимальную пригодность, то есть выбираем кратчайший путь среди всех индивидуумов
            Best=i;
    }
    copy(city.BestRooting,city.colony[Best]);    // Копируем лучшего человека в city.BestRooting
    city.BestFitness=city.fitness[Best];
    city.BestValue=city.Distance[Best];
    city.BestNum=Best;
}

// адаптивность 
double GetFittness(int a[CITY_NUM+1]){
    int i,start,end;
    double Distance=0;
    for(i=0;i<CITY_NUM;i++){
        start=a[i];
		end=a[i+1];
        Distance+=CityDistance[start][end];
    }
    return N/Distance;
}

// Оператор выбора: метод рулетки
void Select(TSP &city){
    int TempColony[POPSIZE][CITY_NUM+1];
    int i,j,t;
    double s;
    double GaiLv[POPSIZE];
    double SelectP[POPSIZE+1];
    double avg;
    double sum=0;
    for(i=0;i<POPSIZE;i++)	sum+=city.fitness[i];
    for(i=0;i<POPSIZE;i++)  GaiLv[i]=city.fitness[i]/sum;
    SelectP[0]=0;
    for(i=0;i<POPSIZE;i++)  SelectP[i+1]=SelectP[i]+GaiLv[i]*RAND_MAX;
    memcpy(TempColony[0],city.colony[city.BestNum],sizeof(TempColony[0]));
    for(t=1;t<POPSIZE;t++){
        double ran = rand() % RAND_MAX + 1;
        s= (double) ran / 100.0;
        for(i=1;i<POPSIZE;i++)	if(SelectP[i]>=s)	break;
        memcpy(TempColony[t],city.colony[i-1],sizeof(TempColony[t]));
    }
    for(i=0;i<POPSIZE;i++)	memcpy(city.colony[i],TempColony[i],sizeof(TempColony[i]));
}
 
// Перекресток: голова и хвост остаются неизменными, а порядок посередине в беспорядке пересекается посередине
void Cross(TSP &city,double pc)// Перекрестная вероятность равна pc
{
    int i,j,t,l;
    int a,b,ca,cb;
    int Temp1[CITY_NUM+1],Temp2[CITY_NUM+1];
    for(i=0;i<POPSIZE;i++){
        double s=((double)(rand()%RAND_MAX))/RAND_MAX;
        if(s<pc){
            cb=rand()%POPSIZE;
            ca=cb;
            if(ca==city.BestNum||cb==city.BestNum)   // Если вы столкнулись с лучшими, перейдите непосредственно к следующему циклу
                continue;

            l=rand()%(CITY_NUM/2)+1;      // половина позиции 
            a=rand()%(CITY_NUM-l)+1;     //Все 

            memset(Hash,0,sizeof(Hash));   // Заменить n байтов после текущей позиции в s на ch и вернуть s.
            Temp1[0]=Temp1[CITY_NUM]=0;
            for(j=1;j<=l;j++)          // Порядок случайный, выбранные помечены как 1 хэшем
            {
                Temp1[j]=city.colony[cb][a+j-1]; //a+l=2~48 25~38
                Hash[Temp1[j]]=1;
            }
            for(t=1;t<CITY_NUM;t++)
            {
                if(Hash[city.colony[ca][t]]==0)
                {
                    Temp1[j++]=city.colony[ca][t];
                    Hash[city.colony[ca][t]]=1;
                }
            }
            memcpy(city.colony[ca],Temp1,sizeof(Temp1));
        }
    }

}

// Поменять местами мутацию
void Mutation(TSP &city,double pm)// Вероятность мутации равна pm
{
    int i,m;
    int Temp[CITY_NUM+1];
    for(int k=0;k<POPSIZE;k++){
        double s=((double)(rand()%RAND_MAX))/RAND_MAX;    // Случайно сгенерированная вероятность 0 ~ 1
        i=rand()%POPSIZE;                       // Произвольно генерируем число от 0 до POPSIZE
        if(s<pm&&i!=city.BestNum)               //i!=city.BestNum, то есть чтобы гарантировать, что оптимальный человек не мутирует
        {
            int a,b,t;
            a=(rand()%(CITY_NUM-1))+1;
            b=(rand()%(CITY_NUM-1))+1;
            copy(Temp,city.colony[i]);
            if(a>b)    // Убедитесь, что b> = a
            {
                t=a;
                a=b;
                b=t;
            }
            for(m=a;m<(a+b)/2;m++)
            {
                t=Temp[m];
                Temp[m]=Temp[a+b-m];
                Temp[a+b-m]=t;
            }

            if(GetFittness(Temp)<GetFittness(city.colony[i]))
            {
                a=(rand()%(CITY_NUM-1))+1;
                b=(rand()%(CITY_NUM-1))+1;
                memcpy(Temp,city.colony[i],sizeof(Temp));
                if(a>b)
                {
                    t=a;
                    a=b;
                    b=t;
                }
                for(m=a;m<(a+b)/2;m++)
                {
                    t=Temp[m];
                    Temp[m]=Temp[a+b-m];
                    Temp[a+b-m]=t;
                }

                    if(GetFittness(Temp)<GetFittness(city.colony[i]))
                    {
                        a=(rand()%(CITY_NUM-1))+1;
                        b=(rand()%(CITY_NUM-1))+1;
                        memcpy(Temp,city.colony[i],sizeof(Temp));
                        if(a>b)
                        {
                            t=a;
                            a=b;
                            b=t;
                        }
                        for(m=a;m<(a+b)/2;m++)
                        {
                            t=Temp[m];
                            Temp[m]=Temp[a+b-m];
                            Temp[a+b-m]=t;
                        }
                    }

            }
            memcpy(city.colony[i],Temp,sizeof(Temp));
        }
    }
}

void OutPut(TSP &city)
{
    cout<<«Лучший путь это:»<<endl;
    for(int i=0;i<=CITY_NUM;i++){
    	cout<<city.BestRooting[i]+1;
		if(i!=CITY_NUM) cout<<"→";
	}
    cout<<endl<<«Лучшая длина пути:»<<city.BestValue<<endl;
}


int main(){
    TSP city;
    srand(seed);
    
	// Чтение данных 
	int m=0,n=0;
	double d=0;
	double num[CITY_NUM]={0},lont[CITY_NUM]={0},lati[CITY_NUM]={0};
	ifstream fin;
	fin.open("att48.txt");  
	while (fin>>d){
		if(m%3==0) num[n]=d;
		else if(m%3==1) lont[n]=d;
		else lati[n++]=d;
		m++;
	}
	
	CityPosition CityPos[CITY_NUM];
	for(int i=0;i<CITY_NUM;i++){
		CityPos[i].x=lont[i];
		CityPos[i].y=lati[i];
	}
	
	
    CalculatDist(CityPos);   // Рассчитаем расстояние до города
    InitColony(city);       // Генерируем начальную популяцию
    CalFitness(city);       // Рассчитать фитнес и выбрать лучший

    for(int i=0;i<MAX_GEN;i++){
		Select(city);           // Выбор: метод рулетки
        Cross(city,CROSS);      //пересекать
        Mutation(city,MUT);     // Мутации
        CalFitness(city);       // Рассчитать новое значение пригодности
    }

    OutPut(city);    //Вывод
    return 0;
}       

